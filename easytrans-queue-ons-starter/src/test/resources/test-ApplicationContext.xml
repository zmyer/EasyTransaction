<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- Test Business configures -->
	<context:annotation-config />
	
	<!-- 注解驱动的事务 -->
	<tx:annotation-driven/>

	<context:component-scan base-package="com.yiqiniu.easytrans" />
		
	<import resource="EasyTransConfig.xml"/>
	
	<!-- test business data source configures,multiple data source to mock distribute service -->
	<!-- whole -->
			<bean id="whole"  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
				<property name="url" value="#{easyTransConfig.extendConfig['test.jdbc.url']}" />
				<property name="username" value="#{easyTransConfig.extendConfig['test.jdbc.username']}" />
				<property name="password" value="#{easyTransConfig.extendConfig['test.jdbc.password']}" />
		
				<!-- 配置最大 -->
				<property name="maxActive" value="30" />
				<!-- 配置初始化大小、最小 -->
				<property name="initialSize" value="1" />
				<property name="minIdle" value="1" />
				<!-- 打开PSCache,并且指定每个连接上PSCache的大小;如果用Oracle,则把poolPreparedStatements配置为true,mysql可以配置为false;分库分表较多的数据库,建议配置为false; -->
				<property name="poolPreparedStatements" value="false" />
				<property name="maxPoolPreparedStatementPerConnectionSize" value="10" />
			</bean>
		
			<bean id="wholeJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
				<property name="dataSource" ref="whole" />
			</bean>
				
			<!-- 数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC、iBATIS等框架的事务管理 -->
			<bean id="wholeTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="whole"/>
			</bean>
	
	
		<!-- order - buySth -->
			<bean id="buySth"  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
				<property name="url" value="#{easyTransConfig.extendConfig['test.jdbc.url']}" />
				<property name="username" value="#{easyTransConfig.extendConfig['test.jdbc.username']}" />
				<property name="password" value="#{easyTransConfig.extendConfig['test.jdbc.password']}" />
		
				<!-- 配置最大 -->
				<property name="maxActive" value="30" />
				<!-- 配置初始化大小、最小 -->
				<property name="initialSize" value="1" />
				<property name="minIdle" value="1" />
				<!-- 打开PSCache,并且指定每个连接上PSCache的大小;如果用Oracle,则把poolPreparedStatements配置为true,mysql可以配置为false;分库分表较多的数据库,建议配置为false; -->
				<property name="poolPreparedStatements" value="false" />
				<property name="maxPoolPreparedStatementPerConnectionSize" value="10" />
			</bean>
		
			<bean id="buySthJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
				<property name="dataSource" ref="buySth" />
			</bean>
				
			<!-- 数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC、iBATIS等框架的事务管理 -->
			<bean id="buySthTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="buySth"/>
			</bean>
	
	
		<!-- wallet - pay -->
			<bean id="pay"  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
				<property name="url" value="#{easyTransConfig.extendConfig['test.jdbc.url']}" />
				<property name="username" value="#{easyTransConfig.extendConfig['test.jdbc.username']}" />
				<property name="password" value="#{easyTransConfig.extendConfig['test.jdbc.password']}" />
		
				<!-- 配置最大 -->
				<property name="maxActive" value="30" />
				<!-- 配置初始化大小、最小 -->
				<property name="initialSize" value="1" />
				<property name="minIdle" value="1" />
				<!-- 打开PSCache,并且指定每个连接上PSCache的大小;如果用Oracle,则把poolPreparedStatements配置为true,mysql可以配置为false;分库分表较多的数据库,建议配置为false; -->
				<property name="poolPreparedStatements" value="false" />
				<property name="maxPoolPreparedStatementPerConnectionSize" value="10" />
			</bean>
		
			<bean id="payJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
				<property name="dataSource" ref="pay" />
			</bean>
				
			<!-- 数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC、iBATIS等框架的事务管理 -->
			<bean id="payTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="pay"/>
			</bean>
			
			
		<!-- accounting - accounting -->
			<bean id="accounting"  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
				<property name="url" value="#{easyTransConfig.extendConfig['test.jdbc.url']}" />
				<property name="username" value="#{easyTransConfig.extendConfig['test.jdbc.username']}" />
				<property name="password" value="#{easyTransConfig.extendConfig['test.jdbc.password']}" />
		
				<!-- 配置最大 -->
				<property name="maxActive" value="30" />
				<!-- 配置初始化大小、最小 -->
				<property name="initialSize" value="1" />
				<property name="minIdle" value="1" />
				<!-- 打开PSCache,并且指定每个连接上PSCache的大小;如果用Oracle,则把poolPreparedStatements配置为true,mysql可以配置为false;分库分表较多的数据库,建议配置为false; -->
				<property name="poolPreparedStatements" value="false" />
				<property name="maxPoolPreparedStatementPerConnectionSize" value="10" />
			</bean>
		
			<bean id="accountingJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
				<property name="dataSource" ref="accounting" />
			</bean>
				
			<!-- 数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC、iBATIS等框架的事务管理 -->
			<bean id="accountingTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="accounting"/>
			</bean>
			
			
			
		<!-- point -->
			<bean id="ReliableOrderMsg"  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
				<property name="url" value="#{easyTransConfig.extendConfig['test.jdbc.url']}" />
				<property name="username" value="#{easyTransConfig.extendConfig['test.jdbc.username']}" />
				<property name="password" value="#{easyTransConfig.extendConfig['test.jdbc.password']}" />
		
				<!-- 配置最大 -->
				<property name="maxActive" value="30" />
				<!-- 配置初始化大小、最小 -->
				<property name="initialSize" value="1" />
				<property name="minIdle" value="1" />
				<!-- 打开PSCache,并且指定每个连接上PSCache的大小;如果用Oracle,则把poolPreparedStatements配置为true,mysql可以配置为false;分库分表较多的数据库,建议配置为false; -->
				<property name="poolPreparedStatements" value="false" />
				<property name="maxPoolPreparedStatementPerConnectionSize" value="10" />
			</bean>
		
			<bean id="ReliableOrderMsgJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
				<property name="dataSource" ref="ReliableOrderMsg" />
			</bean>
				
			<!-- 数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC、iBATIS等框架的事务管理 -->
			<bean id="ReliableOrderMsgTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="ReliableOrderMsg"/>
			</bean>
			
		
		<!-- notification - NotReliableOrderMsg -->
			<bean id="NotReliableOrderMsg"  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
				<property name="url" value="#{easyTransConfig.extendConfig['test.jdbc.url']}" />
				<property name="username" value="#{easyTransConfig.extendConfig['test.jdbc.username']}" />
				<property name="password" value="#{easyTransConfig.extendConfig['test.jdbc.password']}" />
		
				<!-- 配置最大 -->
				<property name="maxActive" value="30" />
				<!-- 配置初始化大小、最小 -->
				<property name="initialSize" value="1" />
				<property name="minIdle" value="1" />
				<!-- 打开PSCache,并且指定每个连接上PSCache的大小;如果用Oracle,则把poolPreparedStatements配置为true,mysql可以配置为false;分库分表较多的数据库,建议配置为false; -->
				<property name="poolPreparedStatements" value="false" />
				<property name="maxPoolPreparedStatementPerConnectionSize" value="10" />
			</bean>
		
			<bean id="NotReliableOrderMsgJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
				<property name="dataSource" ref="NotReliableOrderMsg" />
			</bean>
				
			<!-- 数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC、iBATIS等框架的事务管理 -->
			<bean id="NotReliableOrderMsgTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="NotReliableOrderMsg"/>
			</bean>
		
		
		<!-- express - noticeExpress -->
			<bean id="noticeExpress"  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
				<property name="url" value="#{easyTransConfig.extendConfig['test.jdbc.url']}" />
				<property name="username" value="#{easyTransConfig.extendConfig['test.jdbc.username']}" />
				<property name="password" value="#{easyTransConfig.extendConfig['test.jdbc.password']}" />
		
				<!-- 配置最大 -->
				<property name="maxActive" value="30" />
				<!-- 配置初始化大小、最小 -->
				<property name="initialSize" value="1" />
				<property name="minIdle" value="1" />
				<!-- 打开PSCache,并且指定每个连接上PSCache的大小;如果用Oracle,则把poolPreparedStatements配置为true,mysql可以配置为false;分库分表较多的数据库,建议配置为false; -->
				<property name="poolPreparedStatements" value="false" />
				<property name="maxPoolPreparedStatementPerConnectionSize" value="10" />
			</bean>
		
			<bean id="noticeExpressJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
				<property name="dataSource" ref="noticeExpress" />
			</bean>
				
			<!-- 数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC、iBATIS等框架的事务管理 -->
			<bean id="noticeExpressTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="noticeExpress"/>
			</bean>
</beans>
